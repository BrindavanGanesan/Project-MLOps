name: SageMaker Retraining & ECS Deployment Pipeline

on:
  push:
    branches:
      - main
    paths:
      - "training/**"
      - "pipeline/**"
      - "config/**"
      - "data/**"
      - "dvc.yaml"
      - "config/params.yaml"
  workflow_dispatch:
    inputs:
      reason:
        description: "Reason for triggering retrain"
        required: false

permissions:
  id-token: write
  contents: read

jobs:
  retrain_and_deploy:
    name: Retrain on SageMaker + Deploy to ECS
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      SAGEMAKER_ROLE_ARN: ${{ secrets.SAGEMAKER_ROLE_ARN }}
      DVC_REMOTE: s3://thebrowntiger/dvcstore
      ECR_REPOSITORY: iris-api
      ECS_CLUSTER: iris-api-cluster
      ECS_SERVICE: iris-api-service

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # üîê Configure AWS credentials (OIDC)
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Python environment
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install dvc[s3] boto3 sagemaker mlflow pyyaml

      - name: Verify AWS identity
        run: aws sts get-caller-identity

      # üß† Step 1: Retrain Model
      - name: Run DVC pipeline
        run: dvc repro

      - name: Push updated DVC outputs to remote
        run: dvc push

      - name: Upload new metrics to S3 backup
        run: |
          aws s3 cp artifacts/metrics/metrics.json s3://thebrowntiger/mlops-metrics/metrics-$(date +%Y%m%d-%H%M%S).json

      - name: Register latest model in MLflow
        run: |
          echo "Registering model..."
          python <<'EOF'
          import mlflow, os, sys, glob

          # Find the latest local mlruns folder copied from SageMaker
          mlruns_dirs = sorted(glob.glob("artifacts/sm-output/*/extracted/mlruns"), reverse=True)
          if not mlruns_dirs:
              print("‚ö†Ô∏è No local mlruns found ‚Äî skipping registration.")
              sys.exit(0)

          latest_mlruns = mlruns_dirs[0]
          print(f"üìÇ Using MLflow tracking dir: {latest_mlruns}")

          mlflow.set_tracking_uri(f"file:{latest_mlruns}")
          mlflow.set_registry_uri(f"file:{latest_mlruns}")
          exp_name = "thesis-iris"

          client = mlflow.tracking.MlflowClient()
          exp = client.get_experiment_by_name(exp_name)
          if not exp:
              print(f"‚ö†Ô∏è Experiment '{exp_name}' not found in {latest_mlruns}.")
              sys.exit(0)

          runs = client.search_runs(exp.experiment_id, order_by=["attributes.start_time DESC"], max_results=1)
          if not runs:
              print("‚ö†Ô∏è No runs found ‚Äî skipping model registration.")
              sys.exit(0)

          latest_run = runs[0]
          run_id = latest_run.info.run_id
          model_uri = f"runs:/{run_id}/model"
          print(f"Registering model from run {run_id} ({model_uri}) ...")

          try:
              result = mlflow.register_model(model_uri, "sagemaker-model")
              print("‚úÖ Registered model:", result.name, "version:", result.version)
          except Exception as e:
              print("‚ö†Ô∏è Skipping model registration:", e)
              sys.exit(0)
          EOF


      # üê≥ Step 2: Build and Push Docker Image to ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        run: |
          IMAGE_TAG=${GITHUB_SHA::7}
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REPOSITORY:$IMAGE_TAG ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:latest
          echo "IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Push Docker image to ECR
        run: |
          docker push ${{ env.IMAGE_URI }}
          docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:latest

      # üöÄ Step 3: Force ECS Redeployment
      - name: Force ECS service to deploy new image
        run: |
          echo "Triggering ECS redeployment..."
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --force-new-deployment \
            --region $AWS_REGION

      # ‚úÖ Optional: Deployment confirmation
      - name: Confirm ECS service update
        run: |
          aws ecs describe-services \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE \
            --region $AWS_REGION \
            --query "services[0].deployments"
